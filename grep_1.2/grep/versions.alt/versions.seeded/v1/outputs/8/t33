    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
    fprintf(stderr, "%s: %s\n", prog, mesg);
	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
    if (*beg == '\n')
      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
	  while (p > bp && p[-1] != '\n');
	  nl = memchr(p, '\n', beg - p);
	  if ((nl = memchr(p, '\n', lim - p)) != 0)
      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
	  while (beg > bufbeg && beg[-1] != '\n');
#define USAGE \
  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
	fprintf(stderr, "%s\n", version);
	  keys[keycc++] = '\n';
	  keys[keycc++] = '\n';
	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
		printf("%d\n", count);
		  printf("%s\n", filename);
	      printf("%s\n", filename);
	printf("%d\n", count);
	    printf("(standard input)\n");
	printf("(standard input)\n");
  if (nextchar == NULL || *nextchar == '\0')
		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
				 "%s: option `--%s' doesn't allow an argument\n",
			     "%s: option `%c%s' doesn't allow an argument\n",
		    fprintf (stderr, "%s: option `%s' requires an argument\n",
		fprintf (stderr, "%s: unrecognized option `--%s'\n",
		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
    if (*nextchar == '\0')
	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
	    if (*nextchar != '\0')
	    if (*nextchar != '\0')
		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
		    fprintf (stderr, "%s: option requires an argument -- %c\n",
	    printf ("digits occur in two different argv-elements.\n");
	  printf ("option %c\n", c);
	  printf ("option a\n");
	  printf ("option b\n");
	  printf ("option c with value `%s'\n", optarg);
	  printf ("?? getopt returned character code 0%o ??\n", c);
      printf ("\n");
/* Define the syntax stuff for \<, \>, etc.  */
#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
#define REGEX_REALLOCATE(source, osize, nsize)				\
  (destination = (char *) alloca (nsize),				\
   bcopy (source, destination, osize),					\
#define FIRST_STRING_P(ptr) 					\
#define STORE_NUMBER(destination, number)				\
  do {									\
    (destination)[0] = (number) & 0377;					\
    (destination)[1] = (number) >> 8;					\
#define STORE_NUMBER_AND_INCR(destination, number)			\
  do {									\
    STORE_NUMBER (destination, number);					\
    (destination) += 2;							\
#define EXTRACT_NUMBER(destination, source)				\
  do {									\
    (destination) = *(source) & 0377;					\
    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
  do {									\
    EXTRACT_NUMBER (destination, source);				\
    (source) += 2; 							\
#define EXTRACT_NUMBER_AND_INCR(dest, src) \
#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
  putchar ('\n'); 
      printf ("(null)\n");
      printf ("%d:\t", p - start);
      putchar ('\n');
  printf ("%d:\tend of pattern.\n", p - start);
  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
  printf ("re_nsub: %d\t", bufp->re_nsub);
  printf ("regs_alloc: %d\t", bufp->regs_allocated);
  printf ("can_be_null: %d\t", bufp->can_be_null);
  printf ("newline_anchor: %d\n", bufp->newline_anchor);
  printf ("no_sub: %d\t", bufp->no_sub);
  printf ("not_bol: %d\t", bufp->not_bol);
  printf ("not_eol: %d\t", bufp->not_eol);
  printf ("syntax: %d\n", bufp->syntax);
    "Unmatched ( or \\(",			/* REG_EPAREN */
    "Unmatched \\{",				/* REG_EBRACE */
    "Invalid content of \\{\\}",		/* REG_BADBR */
    "Unmatched ) or \\)",			/* REG_ERPAREN */
#define PATFETCH(c)							\
  do {if (p == pend) return REG_EEND;					\
    c = (unsigned char) *p++;						\
    if (translate) c = translate[c]; 					\
#define PATFETCH_RAW(c)							\
  do {if (p == pend) return REG_EEND;					\
    c = (unsigned char) *p++; 						\
#define GET_BUFFER_SPACE(n)						\
    while (b - bufp->buffer + (n) > bufp->allocated)			\
#define BUF_PUSH(c)							\
  do {									\
    GET_BUFFER_SPACE (1);						\
    *b++ = (unsigned char) (c);						\
#define BUF_PUSH_2(c1, c2)						\
  do {									\
    GET_BUFFER_SPACE (2);						\
    *b++ = (unsigned char) (c1);					\
    *b++ = (unsigned char) (c2);					\
#define BUF_PUSH_3(c1, c2, c3)						\
  do {									\
    GET_BUFFER_SPACE (3);						\
    *b++ = (unsigned char) (c1);					\
    *b++ = (unsigned char) (c2);					\
    *b++ = (unsigned char) (c3);					\
#define STORE_JUMP(op, loc, to) \
#define STORE_JUMP2(op, loc, to, arg) \
#define INSERT_JUMP(op, loc, to) \
#define INSERT_JUMP2(op, loc, to, arg) \
#define EXTEND_BUFFER()							\
  do { 									\
    unsigned char *old_buffer = bufp->buffer;				\
    if (bufp->allocated == MAX_BUF_SIZE) 				\
      return REG_ESIZE;							\
    bufp->allocated <<= 1;						\
    if (bufp->allocated > MAX_BUF_SIZE)					\
      bufp->allocated = MAX_BUF_SIZE; 					\
    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
    if (bufp->buffer == NULL)						\
      return REG_ESPACE;						\
    /* If the buffer moved, move all the pointers into it.  */		\
    if (old_buffer != bufp->buffer)					\
      {									\
        b = (b - old_buffer) + bufp->buffer;				\
        begalt = (begalt - old_buffer) + bufp->buffer;			\
        if (fixup_alt_jump)						\
          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
        if (laststart)							\
          laststart = (laststart - old_buffer) + bufp->buffer;		\
        if (pending_exact)						\
          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
      }									\
#define SET_LIST_BIT(c)                               \
  (b[((unsigned char) (c)) / BYTEWIDTH]               \
#define GET_UNSIGNED_NUMBER(num) 					\
  { if (p != pend)							\
     {									\
       PATFETCH (c); 							\
       while (ISDIGIT (c)) 						\
         { 								\
           if (num < 0)							\
              num = 0;							\
           num = num * 10 + c - '0'; 					\
           if (p == pend) 						\
              break; 							\
           PATFETCH (c);						\
         } 								\
       } 								\
#define IS_CHAR_CLASS(string)						\
   (STREQ (string, "alpha") || STREQ (string, "upper")			\
    || STREQ (string, "lower") || STREQ (string, "digit")		\
    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
    || STREQ (string, "space") || STREQ (string, "print")		\
    || STREQ (string, "punct") || STREQ (string, "graph")		\
  DEBUG_PRINT1 ("\nCompiling pattern: ");
      putchar ('\n');
                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
                   But if we are at the `*' in the exact sequence `.*\n',
                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
                  { /* We have .*\n.  */
              SET_LIST_BIT ('\n');
                /* \ might escape characters inside [...] and [^...].  */
                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
                    str[c1] = '\0';
        case '\n':
        case '\\':
          /* Do not translate the character after the \, so that we can
             distinguish, e.g., \B from \b, even if we normally would
            case '|':					/* `\|'.  */
              /* If \{ is a literal.  */
                     /* If we're at `\{' and it's not the open-interval 
                    if (c != '\\') return REG_EBRACE;
                   if (p > pattern  &&  p[-1] == '\\')
            case '\'':
              /* You might think it would be useful for \ to mean
		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
                      : (p[0] == '\\' && p[1] == '{'))))
      DEBUG_PRINT1 ("\nCompiled pattern: \n");
  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
  boolean next_backslash = *next == '\\';
#define INIT_FAIL_STACK()						\
  do {									\
    fail_stack.stack = (fail_stack_elt_t *)				\
      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
									\
    if (fail_stack.stack == NULL)					\
      return -2;							\
									\
    fail_stack.size = INIT_FAILURE_ALLOC;				\
    fail_stack.avail = 0;						\
#define DOUBLE_FAIL_STACK(fail_stack)					\
  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
   ? 0									\
   : ((fail_stack).stack = (fail_stack_elt_t *)				\
        REGEX_REALLOCATE ((fail_stack).stack, 				\
          (fail_stack).size * sizeof (fail_stack_elt_t),		\
          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
									\
      (fail_stack).stack == NULL					\
      ? 0								\
      : ((fail_stack).size <<= 1, 					\
#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
  ((FAIL_STACK_FULL ()							\
    && !DOUBLE_FAIL_STACK (fail_stack))					\
    ? 0									\
    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
#define PUSH_FAILURE_ITEM(item)						\
#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
  do {									\
    char *destination;							\
    /* Must be int, so when we don't save any registers, the arithmetic	\
       of 0 + -1 isn't done as unsigned.  */				\
    int this_reg;							\
    									\
    DEBUG_STATEMENT (failure_id++);					\
    DEBUG_STATEMENT (nfailure_points_pushed++);				\
    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
									\
    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
									\
    /* Ensure we have enough space allocated for what we will push.  */	\
    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
      {									\
        if (!DOUBLE_FAIL_STACK (fail_stack))			\
          return failure_code;						\
									\
        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
		       (fail_stack).size);				\
        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
      }									\
									\
    /* Push the info, starting with the registers.  */			\
    DEBUG_PRINT1 ("\n");						\
									\
    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
         this_reg++)							\
      {									\
	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
        DEBUG_STATEMENT (num_regs_pushed++);				\
									\
	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
                                                                        \
	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
        PUSH_FAILURE_ITEM (regend[this_reg]);				\
									\
	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
        DEBUG_PRINT2 (" match_null=%d",					\
                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
        DEBUG_PRINT2 (" matched_something=%d",				\
                      MATCHED_SOMETHING (reg_info[this_reg]));		\
        DEBUG_PRINT2 (" ever_matched=%d",				\
                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
	DEBUG_PRINT1 ("\n");						\
        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
      }									\
									\
    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
    PUSH_FAILURE_ITEM (lowest_active_reg);				\
									\
    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
    PUSH_FAILURE_ITEM (highest_active_reg);				\
									\
    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
    PUSH_FAILURE_ITEM (pattern_place);					\
									\
    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
				 size2);				\
    DEBUG_PRINT1 ("'\n");						\
    PUSH_FAILURE_ITEM (string_place);					\
									\
    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
    DEBUG_PUSH (failure_id);						\
#define NUM_FAILURE_ITEMS						\
  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
{									\
  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
  int this_reg;								\
  const unsigned char *string_temp;					\
									\
  assert (!FAIL_STACK_EMPTY ());					\
									\
  /* Remove failure points and point to how many regs pushed.  */	\
  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
									\
  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
									\
  DEBUG_POP (&failure_id);						\
  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
									\
  /* If the saved string location is NULL, it came from an		\
     on_failure_keep_string_jump opcode, and we want to throw away the	\
     saved NULL, thus retaining our current position in the string.  */	\
  string_temp = POP_FAILURE_ITEM ();					\
  if (string_temp != NULL)						\
    str = (const char *) string_temp;					\
									\
  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
  DEBUG_PRINT1 ("'\n");							\
									\
  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
									\
  /* Restore register info.  */						\
  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
									\
  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
									\
  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
    {									\
      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
									\
      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
									\
      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
									\
      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
    }									\
									\
  DEBUG_STATEMENT (nfailure_points_popped++);				\
            fastmap['\n'] = 0;
#define SET_REGS_MATCHED()						\
  do									\
    {									\
      unsigned r;							\
      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
        {								\
          MATCHED_SOMETHING (reg_info[r])				\
            = EVER_MATCHED_SOMETHING (reg_info[r])			\
            = 1;							\
        }								\
    }									\
#define POINTER_TO_OFFSET(ptr)						\
#define PREFETCH()							\
  while (d == dend)						    	\
    {									\
      /* End of string2 => fail.  */					\
      if (dend == end_match_2) 						\
        goto fail;							\
      /* End of string1 => advance to string2.  */ 			\
      d = string2;						        \
      dend = end_match_2;						\
#define WORDCHAR_P(d)							\
  (SYNTAX ((d) == end1 ? *string2					\
           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
#define AT_WORD_BOUNDARY(d)						\
  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
#define FREE_VARIABLES()						\
  do {									\
    FREE_VAR (fail_stack.stack);					\
    FREE_VAR (regstart);						\
    FREE_VAR (regend);							\
    FREE_VAR (old_regstart);						\
    FREE_VAR (old_regend);						\
    FREE_VAR (best_regstart);						\
    FREE_VAR (best_regend);						\
    FREE_VAR (reg_info);						\
    FREE_VAR (reg_dummy);						\
    FREE_VAR (reg_info_dummy);						\
  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
  DEBUG_PRINT1 ("'\n");
      DEBUG_PRINT2 ("\n0x%x: ", p);
              DEBUG_PRINT1 ("backtracking.\n");
                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
                  DEBUG_PRINT1 ("Restoring best registers.\n");
          DEBUG_PRINT1 ("Accepting match.\n");
          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING no_op.\n");
          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING anychar.\n");
          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
	  DEBUG_PRINT2 ("      old_regend: %d\n", 
	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
	/* \<digit> has been turned into a `duplicate' command which is
	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
          DEBUG_PRINT1 ("EXECUTING begline.\n");
          else if (d[-1] == '\n' && bufp->newline_anchor)
          DEBUG_PRINT1 ("EXECUTING endline.\n");
          else if ((d == end1 ? *string2 : *d) == '\n'
          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
           then the . fails against the \n.  But the next thing we want
           to do is match the \n against the \n; if we restored the
          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
             For example, in \(a*\)*\1, we need the preceding group,
             and in \(\(a*\)b*\)\2, we need the inner group.  */
             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
          DEBUG_PRINT1 (":\n");
          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
		/* Consider what happens when matching ":\(.*\)"
                  ("  End of pattern: change to `pop_failure_jump'.\n");
                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
              DEBUG_PRINT1 ("  Match => jump.\n");
            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
          DEBUG_PRINT2 ("(to 0x%x).\n", p);
          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
          DEBUG_PRINT1 ("EXECUTING wordend.\n");
          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
          DEBUG_PRINT1 ("\nFAIL:\n");
#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
  if ((index) >= (nalloc))			  \
    {						  \
      while ((index) >= (nalloc))		  \
	(nalloc) *= 2;				  \
      REALLOC(p, t, nalloc);			  \
#define FETCH(c, eoferr)   	      \
  {			   	      \
    if (! lexleft)	   	      \
      if (eoferr != 0)	   	      \
	dfaerror(eoferr);  	      \
      else		   	      \
	return END;	   	      \
    (c) = (unsigned char) *lexptr++;  \
    --lexleft;		   	      \
	case '\\':
	    dfaerror("Unfinished \\ escape");
		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
	          && lexleft > 0 && *lexptr == '\n'))
	      if (c != '\\')
	case '\n':
	    clrbit('\n', ccl);
	    clrbit('\0', ccl);
	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
		      if (c2 == '\\'
		clrbit('\n', ccl);
   Note that at this point, we're pretending constructs like \< are real
  fprintf(stderr, "dfaanalyze:\n");
  putc('\n', stderr);
	   constructs like \< are treated as nonempty strings here;
      putc('\n', stderr);
      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
      fprintf(stderr, "\n lastpos:");
      putc('\n', stderr);
	putc('\n', stderr);
      setbit('\n', newline);
	    clrbit('\n', matches);
	if (i == '\n')
      if (tstbit('\n', labels[i]))
	      if (c == '\n')
  d->newlines[s] = trans['\n'];
  trans['\n'] = -1;
	if (i == '\n')
  *end = '\n';
      if (count && (char *) p <= end && p[-1] == '\n')
      if (p[-1] == '\n' && newline)
  for (cp = lookin; *cp != '\0'; ++cp)
  new[len] = '\0';
  for (lcp = left; *lcp != '\0'; ++lcp)
	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
  fprintf(stderr, "dfamust:\n");
  putc('\n', stderr);
	      lmp->is[0] = '\0';
	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
	    lmp->left[i] = '\0';
	    lmp->right[j] = '\0';
	  mp->is[0] = '\0';
	    if (lmp->right[0] != '\0' &&
		rmp->left[0] != '\0')
	    if (lmp->is[0] != '\0')
	    if (rmp->is[0] == '\0')
	      lmp->right[0] = '\0';
	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
	      lmp->is[0] = '\0';
	  else if (t == '\0')
	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
      fprintf(stderr, "\n  in:");
	fprintf(stderr, " \"%s\"", mp->in[i]);
      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
      fprintf(stderr, "  left: \"%s\"\n", mp->left);
      fprintf(stderr, "  right: \"%s\"\n", mp->right);
#define DEFAULT_ALIGNMENT  \
#define CALL_CHUNKFUN(h, size) \
  (((h) -> use_extra_arg) \
   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
#define CALL_FREEFUN(h, old_chunk) \
  do { \
    if ((h) -> use_extra_arg) \
      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
    else \
      (*(h)->freefun) ((old_chunk)); \
	strcpy(n, "^\\(");
	strcpy(n, "\\(^\\|[^0-9A-Za-z_]\\)\\(");
	strcpy(n + i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
	strcpy(n + i, "\\)$");
	  end = memchr(beg, '\n', buflim - beg);
	  while (beg > buf && beg[-1] != '\n')
	  end = memchr(beg, '\n', buflim - beg);
	  while (beg > buf && beg[-1] != '\n')
      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
	  if (beg > buf && beg[-1] != '\n')
	  if (beg + len < buf + size && beg[len] != '\n')
  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
  while (beg > buf && beg[-1] != '\n')
